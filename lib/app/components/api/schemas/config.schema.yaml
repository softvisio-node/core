type: object
properties:
  root:
    type: object
    properties:
      email: { type: string, format: email }
      password: { type: ["null", string] }
      telegramUsername:
        anyOf:
          - { type: "null" }
          - { type: string, format: telegram-username }
    required: [email, password, telegramUsername]
    additionalProperties: false

  frontend:
    type: object
    properties:
      maxApiRequestLength: { type: integer, minimum: 1 }
      maxUploadFileSize: { type: integer, minimum: 1 }
      idleTimeout: { type: integer, minimum: 0 }
      sendPingsAutomatically: { type: boolean }
      compress:
        anyOf:
          - type: "null" # use server default
          - type: boolean
          - { type: integer, minimum: 0 }
    required: [maxApiRequestLength, maxUploadFileSize, idleTimeout, sendPingsAutomatically, compress]
    additionalProperties: false

  locales: { type: array, items: { type: string }, minItems: 1, uniqueItems: true }
  defaultLocale: { type: string }
  currency: { type: string }

  frontendUrl: { type: string, format: uri }
  passwordsStrength: { enum: [weak, normal, strong] }
  signupEnabled: { typs: boolean }
  newUserEnabled: { typs: boolean }
  defaultGravatarImage:
    anyOf:
      - { enum: ["404", mp, identicon, monsterid, wavatar, retro, robohash, blank] }
      - { type: string, format: email }
      - { type: string, format: uri }
  defaultGravatarEncoded: { typs: string }

  usersCacheMaxSize: { type: integer, minimum: 1 }
  userTokensCacheMaxSize: { type: integer, minimum: 1 }
  userSessionsCacheMaxSize: { type: integer, minimum: 1 }

  userTokenLength: { type: integer, minimum: 6 }
  userSessionTokenLength: { type: integer, minimum: 6 }
  userActionTokenLength: { type: integer, minimum: 6 }

  apiCallLogCacheDropInterval: { type: integer, minimum: 10_000 } # ms
  lastActivityCacheDropInterval: { type: integer, minimum: 10_000 } # ms
  sessionMaxAge: { type: integer, minimum: 60_000 } # ms
  authorizedSessionMaxAge: { type: integer, minimum: 60_000 } # ms
  actionTokenMaxAge: { type: integer, minimum: 60_000 } # ms
  aclCacheMaxSize: { type: integer, minimum: 0 }

  argon2:
    type: object
    properties:
      preset: { enum: [default] }
      type: { enum: [argon2d, argon2i, argon2id] }
      timeCost: { type: integer, minimum: 2, maximum: 4_294_967_295 }
      parallelism: { type: integer, minimum: 1, maximum: 16_777_215 }
      memoryCost: { type: integer, minimum: 1_024, maximum: 4_294_967_295 }
      saltLength: { type: integer, minimum: 16 }
      hashLength: { type: integer, minimum: 4, maximum: 4_294_967_295 }
    additionalProperties: false

  oauth:
    type: object
    properties:
      google:
        anyOf:
          - type: "null"
          - type: object
            properties:
              clientId: { type: ["null", string] }
              clientSecret: { type: ["null", string] }
            required: [clientId, clientSecret]
            additionalProperties: false

      facebook:
        anyOf:
          - type: "null"
          - type: object
            properties:
              clientId: { type: ["null", string] }
              clientSecret: { type: ["null", string] }
            required: [clientId, clientSecret]
            additionalProperties: false

      github:
        anyOf:
          - type: "null"
          - type: object
            properties:
              clientId: { type: ["null", string] }
              clientSecret: { type: ["null", string] }
            required: [clientId, clientSecret]
            additionalProperties: false

    required: [google, facebook, github]
    additionalProperties: false

  acl:
    anyOf:
      - type: "null"
      - type: object
        properties:
          types:
            type: object
            additionalProperties:
              type: object
              additionalProperties:
                type: object
                properties:
                  name: { type: string }
                  description: { type: string }
                  permissions: { type: array, items: { type: string }, minItems: 1, uniqueItems: true }
                required: [name, description, permissions]
              minProperties: 1 # at least 1 scope is required
            minProperties: 1 # at least 1 acl type is required
          objectTypes:
            type: object
            additionalPropertoes: { type: ["null", string] }
        additionalProperties: false

  notifications:
    type: object
    properties:
      smtp: { type: string, format: uri-whatwg }
      telegramBotKey: { type: ["null", string] }

      types:
        anyOf:
          - { type: "null" }
          - type: object
            additionalProperties:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                channels:
                  type: object
                  properties:
                    internal: { type: ["null", boolean] }
                    email: { type: ["null", boolean] }
                    telegram: { type: ["null", boolean] }
                    push: { type: ["null", boolean] }
                  required: [internal, email, telegram, push]
                  additionalProperties: false
              required: [name, description, channels]
              additionalProperties: false

      firebase:
        anyOf:
          - type: "null"
          - type: object
            properties:
              type: { const: service_account }
              project_id: { type: string }
              private_key_id: { type: string }
              private_key: { type: string }
              client_email: { type: string, format: email }
              client_id: { type: string }
              auth_uri: { type: string, format: uri }
              token_uri: { type: string, format: uri }
              auth_provider_x509_cert_url: { type: string, format: uri }
              client_x509_cert_url: { type: string, format: uri }
            required: [type, project_id, private_key_id, private_key, client_email, client_id, auth_uri, token_uri, auth_provider_x509_cert_url, client_x509_cert_url]
            additionalProperties: false

    required: [smtp, telegramBotKey, types, firebase]
    additionalProperties: false

additionalProperties: false
required:
  - root
  - frontend

  - locales
  - defaultLocale
  - currency

  - frontendUrl
  - passwordsStrength
  - signupEnabled
  - newUserEnabled
  - defaultGravatarImage
  - defaultGravatarEncoded

  - usersCacheMaxSize
  - userTokensCacheMaxSize
  - userSessionsCacheMaxSize

  - userTokenLength
  - userSessionTokenLength
  - userActionTokenLength

  - apiCallLogCacheDropInterval
  - lastActivityCacheDropInterval
  - sessionMaxAge
  - authorizedSessionMaxAge
  - actionTokenMaxAge
  - aclCacheMaxSize

  - argon2

  - oauth

  - acl

  - notifications
