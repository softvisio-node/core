type: object
properties:
  root:
    type: object
    properties:
      email: { type: string, format: email }
      password: { type: ["null", string] }

    additionalProperties: false
    required: [email, password]

  frontend:
    type: object
    properties:
      enabled: { type: boolean }
      maxParallelCallsPerClient:
        anyOf:
          - type: "null"
          - { type: integer, minimum: 1 }
      maxApiRequestLength: { type: integer, minimum: 1 }
      maxUploadFileSize: { type: integer, minimum: 1 }
      idleTimeout: { type: integer, minimum: 0 }
      sendPingsAutomatically: { type: boolean }
      compress:
        anyOf:
          - type: "null" # use server default
          - type: boolean
          - { type: integer, minimum: 0 }

    additionalProperties: false
    required: [enabled, maxParallelCallsPerClient, maxApiRequestLength, maxUploadFileSize, idleTimeout, sendPingsAutomatically, compress]

  locales: { type: array, items: { type: string }, minItems: 1, uniqueItems: true }
  defaultLocale: { type: string }
  currency: { type: string }

  frontendUrl: { type: string, format: uri }
  passwordsStrength: { enum: [weak, normal, strong] }
  signupEnabled: { typs: boolean }
  newUserEnabled: { typs: boolean }
  defaultGravatarImage:
    anyOf:
      - { enum: ["404", mp, identicon, monsterid, wavatar, retro, robohash, blank] }
      - { type: string, format: email }
      - { type: string, format: uri }
  defaultGravatarEncoded: { typs: string }

  usersCacheMaxSize: { type: integer, minimum: 1 }
  userTokensCacheMaxSize: { type: integer, minimum: 1 }
  userSessionsCacheMaxSize: { type: integer, minimum: 1 }

  userTokenLength: { type: integer, minimum: 6 }
  userSessionTokenLength: { type: integer, minimum: 6 }
  userActionTokenLength: { type: integer, minimum: 6 }

  sessionMaxAge: { type: integer, minimum: 60_000 } # ms
  authorizedSessionMaxAge: { type: integer, minimum: 60_000 } # ms
  actionTokenMaxAge: { type: integer, minimum: 60_000 } # ms
  aclCacheMaxSize: { type: integer, minimum: 0 }

  argon2:
    type: object
    properties:
      preset: { enum: [default] }
      type: { enum: [argon2d, argon2i, argon2id] }
      timeCost: { type: integer, minimum: 2, maximum: 4_294_967_295 }
      parallelism: { type: integer, minimum: 1, maximum: 16_777_215 }
      memoryCost: { type: integer, minimum: 1_024, maximum: 4_294_967_295 }
      saltLength: { type: integer, minimum: 16 }
      hashLength: { type: integer, minimum: 4, maximum: 4_294_967_295 }
    additionalProperties: false

  oauth:
    type: object
    properties:
      google:
        anyOf:
          - type: "null"
          - type: object
            properties:
              clientId: { type: ["null", string] }
              clientSecret: { type: ["null", string] }
            additionalProperties: false
            required: [clientId, clientSecret]

      facebook:
        anyOf:
          - type: "null"
          - type: object
            properties:
              clientId: { type: ["null", string] }
              clientSecret: { type: ["null", string] }
            additionalProperties: false
            required: [clientId, clientSecret]

      github:
        anyOf:
          - type: "null"
          - type: object
            properties:
              clientId: { type: ["null", string] }
              clientSecret: { type: ["null", string] }
            required: [clientId, clientSecret]
            additionalProperties: false

    additionalProperties: false
    required: [google, facebook, github]

  acl:
    type: object
    propertyNames: { type: string, format: kebab-case }
    additionalProperties:
      type: object
      propertyNames: { type: string, format: kebab-case }
      additionalProperties:
        type: object
        properties:
          name: { type: string }
          description: { type: string }
          permissions: { type: array, items: { type: string }, minItems: 1, uniqueItems: true }
        required: [name, description, permissions]
      minProperties: 1 # at least 1 role is required
    minProperties: 1 # at least 1 acl type is required

  notifications:
    type: object
    properties:
      internalNotificationsEnabled: { type: boolean }
      emailNotificationsEnabled: { type: boolean }
      telegramNotificationsEnabled: { type: boolean }
      pushNotificationsEnabled: { type: boolean }

      internalNotificationsMaxAge: { type: integer, minimum: 1 }

      smtp: { type: string, format: uri-whatwg }

      telegramBot:
        type: object
        properties:
          type: { type: string, format: camel-case-strict }
          apiKey: { type: ["null", string] }

        additionalProperties: false
        required: [type, apiKey]

      types:
        anyOf:
          - type: "null"
          - type: object
            propertyNames: { type: string, format: kebab-case }
            minProperties: 1
            additionalProperties:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                channels:
                  type: object
                  propertyNames: { enum: [internal, email, telegram, push] }
                  additionalProperties:
                    type: object
                    properties:
                      enabled: { type: boolean }
                      default: { type: boolean }
                      editable: { type: boolean }

                    additionalProperties: false

              additionalProperties: false
              required: [name, description]

      firebase:
        anyOf:
          - type: "null"
          - type: object
            properties:
              prefix:
                anOf:
                  - type: "null"
                  - { type: string, format: kebab-case }
              serviceAccount:
                anyOf:
                  - type: "null"
                  - type: object
                    properties:
                      type: { const: service_account }
                      project_id: { type: string }
                      private_key_id: { type: string }
                      private_key: { type: string }
                      client_email: { type: string, format: email }
                      client_id: { type: string }
                      auth_uri: { type: string, format: uri }
                      token_uri: { type: string, format: uri }
                      auth_provider_x509_cert_url: { type: string, format: uri }
                      client_x509_cert_url: { type: string, format: uri }

                    additionalPropertirs: false
                    required: [project_id, private_key, client_email, token_uri]

            additionalProperties: false

    additionalProperties: false
    required: [internalNotificationsEnabled, emailNotificationsEnabled, telegramNotificationsEnabled, pushNotificationsEnabled, internalNotificationsMaxAge, smtp, telegramBot, types, firebase]

additionalProperties: false
required:
  - root
  - frontend

  - locales
  - defaultLocale
  - currency

  - frontendUrl
  - passwordsStrength
  - signupEnabled
  - newUserEnabled
  - defaultGravatarImage
  - defaultGravatarEncoded

  - usersCacheMaxSize
  - userTokensCacheMaxSize
  - userSessionsCacheMaxSize

  - userTokenLength
  - userSessionTokenLength
  - userActionTokenLength

  - sessionMaxAge
  - authorizedSessionMaxAge
  - actionTokenMaxAge
  - aclCacheMaxSize

  - argon2

  - oauth

  - acl

  - notifications
