- $id: app
  type: object
  properties:
    apiEnabled: { type: boolean }
    rpcEnabled: { type: boolean }
    notificationsEnabled: { type: boolean }
    threadsEnabled: { type: boolean }
    privateHttpServerEnabled: { type: boolean }
    privateHttpServerAddress: { type: string, format: ip-address }
    privateHttpServerPort: { type: integer, minimum: 0, maximum: 65535 }
    publicHttpServerEnabled: { type: boolean }
    publicHttpServerAddress: { type: string, format: ip-address }
    publicHttpServerPort: { type: integer, minimum: 0, maximum: 65535 }
  required:
    - apiEnabled
    - rpcEnabled
    - notificationsEnabled
    - threadsEnabled
    - privateHttpServerEnabled
    - privateHttpServerAddress
    - privateHttpServerPort
    - publicHttpServerEnabled
    - publicHttpServerAddress
    - publicHttpServerPort

- $id: api
  type: object
  properties:
    # settings
    usernameIsEmail: { type: boolean }
    newUserEnabled: { type: boolean }
    defaultGravatarEmail: { type string, format: email }
    defaultGravatarImage: { anyOf: [{ type: string, format: uri }, { enum: [404, mp, identicon, monsterid, wavatar, retro, robohash, blank] }] }
    authCacheMaxSize: { type: integer, minimum: 0 }
    authCacheLastActivityDropInterval: { type: integer, minimum: 10_000 } # ms
    sessionMaxAge: { type: integer, minimum: 60_000 } # ms
    tokenMaxAge: { type: integer, minimum: 60_000 } # ms
    objectUserCacheMaxSize: { type: integer, minimum: 0 }
    apiCallLogCacheDropInterval: { type: integer, minimum: 10_000 } # ms
    defaultGravatarUrl: { type: string, format: uri }

    # connections
    apiMaxPayloadLength: { type: integer, minimum: 1 }
    apiIdleTimeout: { type: integer, minimum: 0 }
    apiSendPingsAutomatically: { type: boolean }
    apiCompression:
      anyOf:
        - { type: boolean }
        - { type: string }
        - { type: array, items: { type: string }, minItems: 1, uniqueItems: true }

  required:
    # settings
    - usernameIsEmail
    - newUserEnabled
    - defaultGravatarEmail
    - defaultGravatarImage
    - authCacheMaxSize
    - authCacheLastActivityDropInterval
    - sessionMaxAge
    - tokenMaxAge
    - objectUserCacheMaxSize
    - apiCallLogCacheDropInterval
    - defaultGravatarUrl

    # connections
    - apiMaxPayloadLength
    - apiIdleTimeout
    - apiSendPingsAutomatically
    - apiCompression

- $id: rpc
  type: object
  properties:
    # connections
    rpcMaxPayloadLength: { type: integer, minimum: 1 }
    rpcIdleTimeout: { type: integer, minimum: 0 }
    rpcSendPingsAutomatically: { type: boolean }
    rpcCompression:
      anyOf:
        - { type: boolean }
        - { type: string }
        - { type: array, items: { type: string }, minItems: 1, uniqueItems: true }

  required:
    # connections
    - rpcMaxPayloadLength
    - rpcIdleTimeout
    - rpcSendPingsAutomatically
    - rpcCompression

- $id: permissions
  type: object
  properties:
    permissions:
      type: object
      additionalProperties:
        type: object
        properties:
          name: { type: string }
          description: { type: string }
          default: { type: boolean }
        required: [name, description, default]
        additionalProperties: false
  required: [permissions]

- $id: objects
  type: object
  properties:
    objects:
      type: object
      additionalProperties:
        type: object
        properties:
          id: { type: integer, minimum: 0 }
          roles:
            type: object
            additionalProperties:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                canEditRoles: { type: boolean }
              required: [name, description]
              additionalProperties: false
        required: [id, roles]
  required: [objects]

- $id: notifications
  type: object
  properties:
    notifications:
      type: object
      additionalProperties:
        type: object
        properties:
          name: { type: string }
          description: { type: string }
          channels:
            type: object
            properties:
              internal: { type: boolean }
              email: { type: boolean }
              telegram: { type: boolean }
              push: { type: boolean }
            required: [internal, email, telegram, push]
            additionalProperties: false
        required: [name, description, channels]
        additionalProperties: false
  required: [notifications]
