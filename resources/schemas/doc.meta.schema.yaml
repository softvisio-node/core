# module
- $id: module
  type: object
  properties:
    summary: { $ref: "components#/summary" }
    description: { $ref: "components#/desc" }

    module: { $ref: "components#/module" }
    id: { type: string }
    name: { type:string }
    members: { type: object }
  required: [summary, module, id, name, members]
  additionalProperties: false

# function
- $id: function
  type: object
  properties:
    function: { type: string }
    summary: { $ref: "components#/summary" }
    description: { $ref: "components#/desc" }
    deprecated: { $ref: "components#/deprecated" }
    async: { type: "boolean" }
    throws: { $ref: "components#/throws" }
    params: { $ref: "components#/params" }

    module: { $ref: "components#/module" }
    id: { type: string }
    name: { type: string }
    isFunction: { $ref: "components#/true" }

  required: [function, summary, module, id, name, isFunction]
  additionalProperties: false

# class
- $id: class
  type: object
  properties:
    class: { type: string }
    summary: { $ref: "components#/summary" }
    description: { $ref: "components#/desc" }
    deprecated: { $ref: "components#/deprecated" }
    extends:
      type: array
      items: { type: string }
      minItems: 1
    events: { $ref: "components#/events" }
    permissions: { $ref: "components#/permissions" }

    module: { $ref: "components#/module" }
    id: { type: string }
    name: { type: string }
    members: { type: object }

  required: [class, summary, module, id, name, members]
  additionalProperties: false

# property
- $id: property
  type: object
  properties:
    property: { type: string }
    summary: { $ref: "components#/summary" }
    description: { $ref: "components#/desc" }
    deprecated: { $ref: "components#/deprecated" }
    static: { type: boolean }

    module: { $ref: "components#/module" }
    id: { type: string }
    name: { type: string }
    isProperty: { $ref: "components#/true" }
    access: { $res: "components#/access" }

  required: [property, summary, module, id, name, isProperty, access]
  additionalProperties: false

# method
- $id: method
  type: object
  properties:
    method: { type: string }
    summary: { $ref: "components#/summary" }
    description: { $ref: "components#/desc" }
    deprecated: { $ref: "components#/deprecated" }
    static: { type: boolean }
    async: { type: "boolean" }
    noParamsValidation: { type: "boolean" }
    permissions: { $ref: "components#/permissions" }
    throws: { $ref: "components#/throws" }
    params: { $ref: "components#/params" }
    logApiCalls: { type: boolean }
    activeRequestsLimit: { type: integer, minimum: 0 }
    activeRequestsUserLimit: { type: integer, minimum: 0 }

    module: { $ref: "components#/module" }
    id: { type: string }
    name: { type: string }
    isMethod: { $ref: "components#/true" }
    isApiMethod: { $ref: "components#/true" }
    access: { $res: "components#/access" }
    inheritedFrom: { type: string }

  required: [method, summary, module, id, name, isMethod, access]
  additionalProperties: false

- $id: components
  deprecated:
    type: string

  true:
    type: boolean
    const: true

  summary:
    type: string

  desc:
    type: string

  module:
    type: object
    properties:
      id: { type: string }
      name: { type: string }
      namespacePath: { type: ["null", string] }
    required: [id, name, namespacePath]
    additionalProperties: false

  access:
    type: string
    enum: [private, protected, public]

  permissions:
    type: array
    items:
      type: string
      pattern: "^(?:[!@*]|[a-z-]+)$"
    minItems: 1

  # TODO
  throws:
    type: array

  # TODO
  events:
    type: array

  params:
    type: array
    minItems: 1
    items:
      type: object
      properties:
        name: { type: string }
        summary: { $ref: "components#/summary" }
        description: { $ref: "components#/desc" }
        required: { type: boolean }
        schema: { type: object }
      required: [name, schema]
      additionalProperties: false
