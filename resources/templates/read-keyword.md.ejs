<Object\>
<% if ( where.length ) { -%>
-   `where` <Object\> Set of the filters by field values:
<% for ( let field of where ) { -%>
<% const operators = Array.isArray( fields[field].operator ) ? fields[field].operator : [fields[field].operator] -%>
    -   `<%- field %>` <Array\><%- fields[field].description ? " " + fields[field].description : "" %><%- fields[field].required ? " **Required**." : "" %> Filter by the `<%- field %>` field value:
        -   <string\> Filter operator, one of the: <%- operators.map( operator => `\`"${operator}"\`` ).join( ", " ) %>.
        -   <<%- fields[field].type %>\> Field value.<% if ( fields[field].enum ) { -%> Allowed values: <%- fields[field].enum.map( value => `\`${fields[field].type === "string" ? '"' : ""}${value}${fields[field].type === "string" ? '"' : ""}\`` ).join( ", " ) %>.<% } %>
<% } -%>
<% } -%>
<% if ( order_by.length ) { -%>
-   `order_by` <Array\> Array of the sort conditions.<%- schema.order_by ? ` **Default:** \`${JSON.stringify( schema.order_by )}\`.` : "" %> Each sort condition must be represented with the two-elements <Array\> with the following structure:
    -   <string\> Field name to sort by, possible fields: <%- order_by.map( field => `\`"${field}"\`` ).join( ", " ) %>.
    -   <string\> Sort direction, can be `"asc"` or `"desc"`. **Default:** `"asc"`.
<% } -%>
<% if ( offset !== false ) { -%>
-   `offset` <integer\> Return results, starting from the specified row. `0` - from the first row. **Default:** `0`.
<% } -%>
<% if ( limit !== false ) { -%>
-   `limit` <integer\> Max rows to return.<%- limit?.maxLimit ? ` Maximum allowed value: \`${limit.maxLimit}\`.` : "" %><%- limit?.defaultLimit || limit?.maxLimit ? ` **Default:** \`${limit?.defaultLimit || limit?.maxLimit}\`.` : "" %><%- limit?.maxResults ? ` This method returns \`${limit?.maxResults}\` rows maximum.` : "" %>
<% } -%>
-   Example (this is the abstract data structure example, not related to the current method):
    ```json
    {
        "where": {
            "field_a": [">=", 100],
            "field_b": ["!=", null],
            "field_c": ["=", "string"]
        },
        "order_by": [
            ["field_a", "asc"],
            ["field_b", "desc"]
        ],
        "offset": 100,
        "limit": 50
    }
    ```
