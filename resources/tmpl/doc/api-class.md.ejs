# <%- spec.info.title %>

version: __<%- spec.info.version %>__

<%- spec.info.description %>

* [Methods](#methods)
<% for ( let method of Object.keys(spec.members).sort().filter(id => spec.members[id].isMethod).map(id => spec.members[id]) ) { -%>
<% if (method.deprecated) { -%>
    * [__~~<%- method.name %>~~__ `[deprecated]`<%- method.summary ? ` - ${method.summary}` : "" %>](#<%- `${method.name}-deprecated` %>)
<% } else { -%>
    * [__<%- method.name %>__<%- method.summary ? ` - ${method.summary}` : "" %>](#<%- method.name %>)
<% } -%>
<% } -%>

# Methods

<% for ( let method of Object.keys(spec.members).sort().filter(id => spec.members[id].isMethod).map(id => spec.members[id]) ) { -%>
<% if (method.deprecated) { -%>
## ~~<%- method.name %>~~ `[deprecated]`
<% } else { -%>
## <%- method.name %>
<% } -%>
<% if (method.summary) { -%>

<%- method.summary %>
<% } -%>

```
let res = await $api.call( "<%- method.id %>"<%- method.templateParams %> );
```
<% if (method.description) { -%>

<%- method.description %>
<% } -%>

#### Parameters

<% if (!method.params) { -%>
Method require no parameters.
<% } else { -%>
<% for ( let param of method.params ) { -%>
* __<%- param.name %>__ `[<%- !param.required ? "not " : "" %>required]`<%- param.summary ? ` - ${param.summary}` : "" %>
<% if (param.description) { -%>

<%- param.description %>
<% } -%>

<%- param.templateSchema -%>

<% } -%>
<% } -%>
<% } -%>
