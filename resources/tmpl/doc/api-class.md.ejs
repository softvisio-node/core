# <%- spec.apiNamespace %>

<%- spec.summary %>
<% if (spec.description) { -%>

<%- spec.description %>
<% } -%>

-   [Methods](#methods)
<% for ( let method of Object.keys(spec.members).sort().filter(id => spec.members[id].isApiMethod).map(id => spec.members[id]) ) { -%>
<% if (method.deprecated) { -%>
    -   [**~~<%- method.apiName %>~~** `[deprecated]`<%- method.summary ? ` - ${method.summary}` : "" %>](#<%- `${method.markdownId}` %>)
<% } else { -%>
    -   [**<%- method.apiName %>**<%- method.summary ? ` - ${method.summary}` : "" %>](#<%- method.markdownId %>)
<% } -%>
<% } -%>

<a id="methods"></a>

# Methods
<% for ( let method of Object.keys(spec.members).sort().filter(id => spec.members[id].isApiMethod).map(id => spec.members[id]) ) { -%>

<a id="<%- method.markdownId %>"></a>

<% if (method.deprecated) { -%>
## ~~<%- method.apiName %>~~ `[deprecated]`
<% } else { -%>
## <%- method.apiName %>
<% } -%>
<% if (method.summary) { -%>

<%- method.summary %>
<% } -%>

```
const res = await api.call( "<%- method.apiFullName %>"<%- method.templateParams %> );
```
<% if (method.description) { -%>

<%- method.description %>
<% } -%>

#### Permissions

<% for ( let permission of method.permissions ) { -%>
<% if ( permission === "*" ) { -%>
-   "\*" - any connected user;
<% } else if ( permission === "guest" ) { -%>
-   "guest" - any guest (not-authenticated) user;
<% } else if ( permission === "user" ) { -%>
-   "user" - any authenticated user;
<% } else if ( permission === "root" ) { -%>
-   "root" - root user;
<% } else { -%>
-   "<%- permission %>";
<% } -%>
<% } -%>

#### Parameters
<% if (!method.params) { -%>

Method require no parameters.
<% } else { -%>
<% for ( let param of method.params ) { -%>

-   **<%- param.name %>** `[<%- !param.required ? "not " : "" %>required]`<%- param.summary ? ` - ${param.summary}` : "" %>
<% if (param.description) { -%>

<%- param.description %>
<% } -%>

    ```
<%- param.templateSchema %>
    ```
<% } -%>
<% } -%>
<% } -%>
